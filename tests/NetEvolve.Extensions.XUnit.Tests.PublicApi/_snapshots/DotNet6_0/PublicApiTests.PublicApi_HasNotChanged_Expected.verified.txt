namespace NetEvolve.Extensions.XUnit
{
    public sealed class AcceptanceTestAttribute : NetEvolve.Extensions.XUnit.Internal.CategoryTraitBaseAttribute
    {
        public AcceptanceTestAttribute() { }
    }
    public sealed class ArchitectureTestAttribute : NetEvolve.Extensions.XUnit.Internal.CategoryTraitBaseAttribute
    {
        public ArchitectureTestAttribute() { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method, AllowMultiple=true)]
    public sealed class BugAttribute : NetEvolve.Extensions.XUnit.Internal.CategoryWithIdTraitBaseAttribute
    {
        public BugAttribute() { }
        public BugAttribute(long id) { }
        public BugAttribute(string? id) { }
    }
    public sealed class CodedUITestAttribute : NetEvolve.Extensions.XUnit.Internal.CategoryTraitBaseAttribute
    {
        public CodedUITestAttribute() { }
    }
    public sealed class EndToEndTestAttribute : NetEvolve.Extensions.XUnit.Internal.CategoryTraitBaseAttribute
    {
        public EndToEndTestAttribute() { }
    }
    public sealed class EpicAttribute : NetEvolve.Extensions.XUnit.Internal.CategoryWithIdTraitBaseAttribute
    {
        public EpicAttribute() { }
        public EpicAttribute(long id) { }
        public EpicAttribute(string? id) { }
    }
    public sealed class FeatureAttribute : NetEvolve.Extensions.XUnit.Internal.CategoryWithIdTraitBaseAttribute
    {
        public FeatureAttribute() { }
        public FeatureAttribute(long id) { }
        public FeatureAttribute(string? id) { }
    }
    public sealed class FunctionalTestAttribute : NetEvolve.Extensions.XUnit.Internal.CategoryTraitBaseAttribute
    {
        public FunctionalTestAttribute() { }
    }
    public sealed class IntegrationTestAttribute : NetEvolve.Extensions.XUnit.Internal.CategoryTraitBaseAttribute
    {
        public IntegrationTestAttribute() { }
    }
    public sealed class IssueAttribute : NetEvolve.Extensions.XUnit.Internal.CategoryWithIdTraitBaseAttribute
    {
        public IssueAttribute() { }
        public IssueAttribute(long id) { }
        public IssueAttribute(string? id) { }
    }
    public sealed class PerformanceTestAttribute : NetEvolve.Extensions.XUnit.Internal.CategoryTraitBaseAttribute
    {
        public PerformanceTestAttribute() { }
    }
    public sealed class PostDeploymentAttribute : NetEvolve.Extensions.XUnit.Internal.CategoryTraitBaseAttribute
    {
        public PostDeploymentAttribute() { }
    }
    public sealed class PreDeploymentAttribute : NetEvolve.Extensions.XUnit.Internal.CategoryTraitBaseAttribute
    {
        public PreDeploymentAttribute() { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method, Inherited=false)]
    public sealed class SetCultureAttribute : NetEvolve.Extensions.XUnit.Internal.CultureAttributeBase
    {
        public SetCultureAttribute() { }
        public SetCultureAttribute(string culture) { }
        public SetCultureAttribute(string culture, string? uiCulture) { }
        public string? UICulture { get; }
        public override void After(System.Reflection.MethodInfo methodUnderTest) { }
        public override void Before(System.Reflection.MethodInfo methodUnderTest) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method, Inherited=false)]
    public sealed class SetUICultureAttribute : NetEvolve.Extensions.XUnit.Internal.CultureAttributeBase
    {
        public SetUICultureAttribute() { }
        public SetUICultureAttribute(string culture) { }
    }
    public sealed class UnitTestAttribute : NetEvolve.Extensions.XUnit.Internal.CategoryTraitBaseAttribute
    {
        public UnitTestAttribute() { }
    }
    public sealed class UserStoryAttribute : NetEvolve.Extensions.XUnit.Internal.CategoryWithIdTraitBaseAttribute
    {
        public UserStoryAttribute() { }
        public UserStoryAttribute(long id) { }
        public UserStoryAttribute(string? id) { }
    }
    public sealed class WorkItemAttribute : NetEvolve.Extensions.XUnit.Internal.CategoryWithIdTraitBaseAttribute
    {
        public WorkItemAttribute() { }
        public WorkItemAttribute(long id) { }
        public WorkItemAttribute(string? id) { }
    }
}
namespace NetEvolve.Extensions.XUnit.Internal
{
    [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Method, AllowMultiple=true, Inherited=true)]
    [Xunit.Sdk.TraitDiscoverer("NetEvolve.Extensions.XUnit.Internal.CategoryTraitDiscoverer", "NetEvolve.Extensions.XUnit")]
    public abstract class CategoryTraitBaseAttribute : System.Attribute, Xunit.Sdk.ITraitAttribute
    {
        protected CategoryTraitBaseAttribute(string category) { }
        public string Category { get; }
    }
    public sealed class CategoryTraitDiscoverer : NetEvolve.Extensions.XUnit.Internal.DiscovererBase
    {
        public CategoryTraitDiscoverer() { }
        public override System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>> GetTraits(Xunit.Abstractions.IAttributeInfo traitAttribute) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method, AllowMultiple=true, Inherited=true)]
    [Xunit.Sdk.TraitDiscoverer("NetEvolve.Extensions.XUnit.Internal.CategoryTraitDiscoverer", "NetEvolve.Extensions.XUnit")]
    public abstract class CategoryWithIdTraitBaseAttribute : System.Attribute, Xunit.Sdk.ITraitAttribute
    {
        protected CategoryWithIdTraitBaseAttribute(string category, long id) { }
        protected CategoryWithIdTraitBaseAttribute(string category, string? id) { }
        public string Category { get; }
        public string? Id { get; }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method, AllowMultiple=true, Inherited=true)]
    [Xunit.Sdk.TraitDiscoverer("NetEvolve.Extensions.XUnit.Internal.CultureTraitDiscoverer", "NetEvolve.Extensions.XUnit")]
    public abstract class CultureAttributeBase : Xunit.Sdk.BeforeAfterTestAttribute, Xunit.Sdk.ITraitAttribute
    {
        protected CultureAttributeBase(string category, string culture) { }
        public string Category { get; }
        public string Culture { get; }
        public override void After(System.Reflection.MethodInfo methodUnderTest) { }
        public override void Before(System.Reflection.MethodInfo methodUnderTest) { }
    }
    public sealed class CultureTraitDiscoverer : NetEvolve.Extensions.XUnit.Internal.DiscovererBase
    {
        public CultureTraitDiscoverer() { }
        public override System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>> GetTraits(Xunit.Abstractions.IAttributeInfo traitAttribute) { }
    }
    public abstract class DiscovererBase : Xunit.Sdk.ITraitDiscoverer
    {
        protected DiscovererBase() { }
        public abstract System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>> GetTraits(Xunit.Abstractions.IAttributeInfo traitAttribute);
    }
}