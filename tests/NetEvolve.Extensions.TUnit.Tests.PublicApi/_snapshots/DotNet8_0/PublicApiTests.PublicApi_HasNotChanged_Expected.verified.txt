namespace NetEvolve.Extensions.TUnit
{
    public sealed class AcceptanceTestAttribute : NetEvolve.Extensions.TUnit.Internal.CategoryTraitBaseAttribute
    {
        public AcceptanceTestAttribute() { }
    }
    public sealed class ArchitectureTestAttribute : NetEvolve.Extensions.TUnit.Internal.CategoryTraitBaseAttribute
    {
        public ArchitectureTestAttribute() { }
    }
    public sealed class BugAttribute : NetEvolve.Extensions.TUnit.Internal.CategoryWithIdTraitBaseAttribute
    {
        public BugAttribute() { }
        public BugAttribute(long id) { }
        public BugAttribute(string? id) { }
    }
    public sealed class CodedUITestAttribute : NetEvolve.Extensions.TUnit.Internal.CategoryTraitBaseAttribute
    {
        public CodedUITestAttribute() { }
    }
    public sealed class EndToEndTestAttribute : NetEvolve.Extensions.TUnit.Internal.CategoryTraitBaseAttribute
    {
        public EndToEndTestAttribute() { }
    }
    public sealed class EpicAttribute : NetEvolve.Extensions.TUnit.Internal.CategoryWithIdTraitBaseAttribute
    {
        public EpicAttribute() { }
        public EpicAttribute(long id) { }
        public EpicAttribute(string? id) { }
    }
    public sealed class FeatureAttribute : NetEvolve.Extensions.TUnit.Internal.CategoryWithIdTraitBaseAttribute
    {
        public FeatureAttribute() { }
        public FeatureAttribute(long id) { }
        public FeatureAttribute(string? id) { }
    }
    public sealed class FunctionalTestAttribute : NetEvolve.Extensions.TUnit.Internal.CategoryTraitBaseAttribute
    {
        public FunctionalTestAttribute() { }
    }
    public sealed class IntegrationTestAttribute : NetEvolve.Extensions.TUnit.Internal.CategoryTraitBaseAttribute
    {
        public IntegrationTestAttribute() { }
    }
    public sealed class IssueAttribute : NetEvolve.Extensions.TUnit.Internal.CategoryWithIdTraitBaseAttribute
    {
        public IssueAttribute() { }
        public IssueAttribute(long id) { }
        public IssueAttribute(string? id) { }
    }
    public sealed class PerformanceTestAttribute : NetEvolve.Extensions.TUnit.Internal.CategoryTraitBaseAttribute
    {
        public PerformanceTestAttribute() { }
    }
    public sealed class PostDeploymentAttribute : NetEvolve.Extensions.TUnit.Internal.CategoryTraitBaseAttribute
    {
        public PostDeploymentAttribute() { }
    }
    public sealed class PreDeploymentAttribute : NetEvolve.Extensions.TUnit.Internal.CategoryTraitBaseAttribute
    {
        public PreDeploymentAttribute() { }
    }
    public sealed class TestGroupAttribute : NetEvolve.Extensions.TUnit.Internal.NamedCategoryTraitBaseAttribute
    {
        public TestGroupAttribute(string id) { }
    }
    public sealed class UnitTestAttribute : NetEvolve.Extensions.TUnit.Internal.CategoryTraitBaseAttribute
    {
        public UnitTestAttribute() { }
    }
    public sealed class UserStoryAttribute : NetEvolve.Extensions.TUnit.Internal.CategoryWithIdTraitBaseAttribute
    {
        public UserStoryAttribute() { }
        public UserStoryAttribute(long id) { }
        public UserStoryAttribute(string? id) { }
    }
    public sealed class WorkItemAttribute : NetEvolve.Extensions.TUnit.Internal.CategoryWithIdTraitBaseAttribute
    {
        public WorkItemAttribute() { }
        public WorkItemAttribute(long id) { }
        public WorkItemAttribute(string? id) { }
    }
}
namespace NetEvolve.Extensions.TUnit.Internal
{
    public abstract class CategoryTraitBaseAttribute : System.Attribute, TUnit.Core.Interfaces.IEventReceiver, TUnit.Core.Interfaces.ITestDiscoveryEventReceiver
    {
        protected CategoryTraitBaseAttribute(string category) { }
        public string Category { get; }
        public int Order { get; }
        public System.Threading.Tasks.ValueTask OnTestDiscovered(TUnit.Core.DiscoveredTestContext context) { }
    }
    public abstract class CategoryWithIdTraitBaseAttribute : System.Attribute, TUnit.Core.Interfaces.IEventReceiver, TUnit.Core.Interfaces.ITestDiscoveryEventReceiver
    {
        protected CategoryWithIdTraitBaseAttribute(string category, long id) { }
        protected CategoryWithIdTraitBaseAttribute(string category, string? id) { }
        public string Category { get; }
        public string? Id { get; }
        public int Order { get; }
        public System.Threading.Tasks.ValueTask OnTestDiscovered(TUnit.Core.DiscoveredTestContext context) { }
    }
    public abstract class NamedCategoryTraitBaseAttribute : System.Attribute, TUnit.Core.Interfaces.IEventReceiver, TUnit.Core.Interfaces.ITestDiscoveryEventReceiver
    {
        protected NamedCategoryTraitBaseAttribute(string category, string id) { }
        public string Category { get; }
        public string Id { get; }
        public int Order { get; }
        public System.Threading.Tasks.ValueTask OnTestDiscovered(TUnit.Core.DiscoveredTestContext context) { }
    }
}
namespace TUnit.Core.Helpers
{
    public static class ReflectionReplacements
    {
        public static bool IsAotMode { get; }
        public static object?[]? ConvertTupleToArray(object tuple) { }
        public static System.Threading.Tasks.Task<object?> InvokeMethodAsync(string methodKey, object? instance, params object?[]? parameters) { }
        public static bool IsTupleType(System.Type type) { }
        public static System.Type? MakeGenericType(System.Type genericDefinition, params System.Type[] typeArguments) { }
        public static void RegisterGenericTypeFactory(TUnit.Core.Helpers.ReflectionReplacements.GenericTypeFactoryDelegate genericTypeFactory) { }
        public static void RegisterMethodInvoker(TUnit.Core.Helpers.ReflectionReplacements.MethodInvokerDelegate methodInvoker) { }
        public static void RegisterPropertyInjector<T>(TUnit.Core.Helpers.ReflectionReplacements.PropertyInjectorDelegate<T> propertyInjector)
            where T :  notnull { }
        public static void RegisterTupleConverter(TUnit.Core.Helpers.ReflectionReplacements.TupleConverterDelegate tupleConverter) { }
        public static void RegisterTupleTypeChecker(TUnit.Core.Helpers.ReflectionReplacements.TupleTypeCheckerDelegate tupleTypeChecker) { }
        public static void RegisterTypeResolver(TUnit.Core.Helpers.ReflectionReplacements.TypeResolverDelegate typeResolver) { }
        public static System.Type? ResolveType(string assemblyQualifiedName) { }
        public delegate System.Type? GenericTypeFactoryDelegate(System.Type genericDefinition, System.Type[] typeArguments);
        public delegate System.Threading.Tasks.Task<object?> MethodInvokerDelegate(string methodKey, object? instance, object?[]? parameters);
        public delegate System.Threading.Tasks.Task PropertyInjectorDelegate<T>(T instance, System.Collections.Generic.Dictionary<string, object?> propertyValues, TUnit.Core.TestContext testContext);
        public delegate object?[]? TupleConverterDelegate(object tuple);
        public delegate bool TupleTypeCheckerDelegate(System.Type type);
        public delegate System.Type? TypeResolverDelegate(string assemblyQualifiedName);
    }
}
namespace TUnit.Generated
{
    public static class AotReplacementRegistry
    {
        [System.Runtime.CompilerServices.ModuleInitializer]
        public static void Initialize() { }
    }
    public static class AotTypeResolver
    {
        public static System.Type? MakeGenericType(System.Type genericTypeDefinition, params System.Type[] typeArguments) { }
        public static System.Type? ResolveType(string assemblyQualifiedName) { }
    }
}